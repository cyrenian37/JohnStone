#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SunSeven.DataSource
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="JohnStone")]
	public partial class JSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertVatRate(VatRate instance);
    partial void UpdateVatRate(VatRate instance);
    partial void DeleteVatRate(VatRate instance);
    partial void InsertClientType(ClientType instance);
    partial void UpdateClientType(ClientType instance);
    partial void DeleteClientType(ClientType instance);
    partial void InsertCredit(Credit instance);
    partial void UpdateCredit(Credit instance);
    partial void DeleteCredit(Credit instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertEmp_Dept(Emp_Dept instance);
    partial void UpdateEmp_Dept(Emp_Dept instance);
    partial void DeleteEmp_Dept(Emp_Dept instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertOrderItem(OrderItem instance);
    partial void UpdateOrderItem(OrderItem instance);
    partial void DeleteOrderItem(OrderItem instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertPayStatus(PayStatus instance);
    partial void UpdatePayStatus(PayStatus instance);
    partial void DeletePayStatus(PayStatus instance);
    partial void InsertPayType(PayType instance);
    partial void UpdatePayType(PayType instance);
    partial void DeletePayType(PayType instance);
    partial void InsertPriceHistory(PriceHistory instance);
    partial void UpdatePriceHistory(PriceHistory instance);
    partial void DeletePriceHistory(PriceHistory instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSale(Sale instance);
    partial void UpdateSale(Sale instance);
    partial void DeleteSale(Sale instance);
    partial void InsertSalesItem(SalesItem instance);
    partial void UpdateSalesItem(SalesItem instance);
    partial void DeleteSalesItem(SalesItem instance);
    partial void InsertSalesStatus(SalesStatus instance);
    partial void UpdateSalesStatus(SalesStatus instance);
    partial void DeleteSalesStatus(SalesStatus instance);
    partial void InsertSalesType(SalesType instance);
    partial void UpdateSalesType(SalesType instance);
    partial void DeleteSalesType(SalesType instance);
    partial void InsertSellingUnit(SellingUnit instance);
    partial void UpdateSellingUnit(SellingUnit instance);
    partial void DeleteSellingUnit(SellingUnit instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertProductUnit(ProductUnit instance);
    partial void UpdateProductUnit(ProductUnit instance);
    partial void DeleteProductUnit(ProductUnit instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertScreen(Screen instance);
    partial void UpdateScreen(Screen instance);
    partial void DeleteScreen(Screen instance);
    partial void InsertUserScreen(UserScreen instance);
    partial void UpdateUserScreen(UserScreen instance);
    partial void DeleteUserScreen(UserScreen instance);
    partial void InsertSecurity(Security instance);
    partial void UpdateSecurity(Security instance);
    partial void DeleteSecurity(Security instance);
    partial void InsertSupply(Supply instance);
    partial void UpdateSupply(Supply instance);
    partial void DeleteSupply(Supply instance);
    partial void InsertSupplyItem(SupplyItem instance);
    partial void UpdateSupplyItem(SupplyItem instance);
    partial void DeleteSupplyItem(SupplyItem instance);
    partial void InsertCompanyInfo(CompanyInfo instance);
    partial void UpdateCompanyInfo(CompanyInfo instance);
    partial void DeleteCompanyInfo(CompanyInfo instance);
    #endregion
		
		public JSDataContext() : 
				base(global::SunSeven.Properties.Settings.Default.JSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public JSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<VatRate> VatRates
		{
			get
			{
				return this.GetTable<VatRate>();
			}
		}
		
		public System.Data.Linq.Table<ClientType> ClientTypes
		{
			get
			{
				return this.GetTable<ClientType>();
			}
		}
		
		public System.Data.Linq.Table<Credit> Credits
		{
			get
			{
				return this.GetTable<Credit>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Emp_Dept> Emp_Depts
		{
			get
			{
				return this.GetTable<Emp_Dept>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<OrderItem> OrderItems
		{
			get
			{
				return this.GetTable<OrderItem>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<PayStatus> PayStatus
		{
			get
			{
				return this.GetTable<PayStatus>();
			}
		}
		
		public System.Data.Linq.Table<PayType> PayTypes
		{
			get
			{
				return this.GetTable<PayType>();
			}
		}
		
		public System.Data.Linq.Table<PriceHistory> PriceHistories
		{
			get
			{
				return this.GetTable<PriceHistory>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Sale> Sales
		{
			get
			{
				return this.GetTable<Sale>();
			}
		}
		
		public System.Data.Linq.Table<SalesItem> SalesItems
		{
			get
			{
				return this.GetTable<SalesItem>();
			}
		}
		
		public System.Data.Linq.Table<SalesStatus> SalesStatus
		{
			get
			{
				return this.GetTable<SalesStatus>();
			}
		}
		
		public System.Data.Linq.Table<SalesType> SalesTypes
		{
			get
			{
				return this.GetTable<SalesType>();
			}
		}
		
		public System.Data.Linq.Table<SellingUnit> SellingUnits
		{
			get
			{
				return this.GetTable<SellingUnit>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<vOrderDetail> vOrderDetails
		{
			get
			{
				return this.GetTable<vOrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<vSale> vSales
		{
			get
			{
				return this.GetTable<vSale>();
			}
		}
		
		public System.Data.Linq.Table<vSalesItem> vSalesItems
		{
			get
			{
				return this.GetTable<vSalesItem>();
			}
		}
		
		public System.Data.Linq.Table<vSalesMaster> vSalesMasters
		{
			get
			{
				return this.GetTable<vSalesMaster>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<ProductUnit> ProductUnits
		{
			get
			{
				return this.GetTable<ProductUnit>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Screen> Screens
		{
			get
			{
				return this.GetTable<Screen>();
			}
		}
		
		public System.Data.Linq.Table<UserScreen> UserScreens
		{
			get
			{
				return this.GetTable<UserScreen>();
			}
		}
		
		public System.Data.Linq.Table<Security> Securities
		{
			get
			{
				return this.GetTable<Security>();
			}
		}
		
		public System.Data.Linq.Table<Supply> Supplies
		{
			get
			{
				return this.GetTable<Supply>();
			}
		}
		
		public System.Data.Linq.Table<SupplyItem> SupplyItems
		{
			get
			{
				return this.GetTable<SupplyItem>();
			}
		}
		
		public System.Data.Linq.Table<CompanyInfo> CompanyInfos
		{
			get
			{
				return this.GetTable<CompanyInfo>();
			}
		}
		
		public System.Data.Linq.Table<vEmpDept> vEmpDepts
		{
			get
			{
				return this.GetTable<vEmpDept>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="HS.quotationHistory")]
		public ISingleResult<quotationHistoryResult> quotationHistory([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> pST, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> pET, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> pType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pST, pET, pType);
			return ((ISingleResult<quotationHistoryResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="HS.getHistoryUnitPrice", IsComposable=true)]
		public System.Nullable<decimal> getHistoryUnitPrice([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> pCustomerId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> pProductId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> pUnitId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> pInvoiceDate)
		{
			return ((System.Nullable<decimal>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pCustomerId, pProductId, pUnitId, pInvoiceDate).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="HS.OpenOrder")]
		public ISingleResult<OpenOrderResult> OpenOrder([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> pST, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> pET)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pST, pET);
			return ((ISingleResult<OpenOrderResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="HS.orderHistory")]
		public ISingleResult<orderHistoryResult> orderHistory([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> pST, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> pET, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> pType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pST, pET, pType);
			return ((ISingleResult<orderHistoryResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ProductByCustomer", IsComposable=true)]
		public IQueryable<ProductByCustomerResult> ProductByCustomer([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CustomerId", DbType="Int")] System.Nullable<int> customerId)
		{
			return this.CreateMethodCallQuery<ProductByCustomerResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customerId);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getUniqInvoiceNo")]
		public ISingleResult<getUniqInvoiceNoResult> getUniqInvoiceNo()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<getUniqInvoiceNoResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="HS.ProductFiltering", IsComposable=true)]
		public IQueryable<ProductFilteringResult> ProductFiltering([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CustomerId", DbType="Int")] System.Nullable<int> customerId)
		{
			return this.CreateMethodCallQuery<ProductFilteringResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customerId);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="HS.EmployeeAtWork", IsComposable=true)]
		public IQueryable<EmployeeAtWorkResult> EmployeeAtWork([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Department", DbType="VarChar(50)")] string department)
		{
			return this.CreateMethodCallQuery<EmployeeAtWorkResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, department);
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ParentId;
		
		private string _Name;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<Category> _Category1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Category()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Category1 = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Category1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Categories", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Products", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Category", Storage="_Category1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Category Category1
		{
			get
			{
				return this._Category1.Entity;
			}
			set
			{
				Category previousValue = this._Category1.Entity;
				if (((previousValue != value) 
							|| (this._Category1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category1.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Category1.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.VatRate")]
	public partial class VatRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private decimal _Rate;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntitySet<Product> _Products;
		
		private EntitySet<SalesItem> _SalesItems;
		
		private EntitySet<SupplyItem> _SupplyItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRateChanging(decimal value);
    partial void OnRateChanged();
    #endregion
		
		public VatRate()
		{
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._SalesItems = new EntitySet<SalesItem>(new Action<SalesItem>(this.attach_SalesItems), new Action<SalesItem>(this.detach_SalesItems));
			this._SupplyItems = new EntitySet<SupplyItem>(new Action<SupplyItem>(this.attach_SupplyItems), new Action<SupplyItem>(this.detach_SupplyItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Decimal(10,2) NOT NULL")]
		public decimal Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VatRate_OrderItem", Storage="_OrderItems", ThisKey="Id", OtherKey="VatId")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VatRate_Product", Storage="_Products", ThisKey="Id", OtherKey="VatRateId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VatRate_SalesItem", Storage="_SalesItems", ThisKey="Id", OtherKey="VatId")]
		public EntitySet<SalesItem> SalesItems
		{
			get
			{
				return this._SalesItems;
			}
			set
			{
				this._SalesItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VatRate_SupplyItem", Storage="_SupplyItems", ThisKey="Id", OtherKey="VatId")]
		public EntitySet<SupplyItem> SupplyItems
		{
			get
			{
				return this._SupplyItems;
			}
			set
			{
				this._SupplyItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.VatRate = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.VatRate = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.VatRate = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.VatRate = null;
		}
		
		private void attach_SalesItems(SalesItem entity)
		{
			this.SendPropertyChanging();
			entity.VatRate = this;
		}
		
		private void detach_SalesItems(SalesItem entity)
		{
			this.SendPropertyChanging();
			entity.VatRate = null;
		}
		
		private void attach_SupplyItems(SupplyItem entity)
		{
			this.SendPropertyChanging();
			entity.VatRate = this;
		}
		
		private void detach_SupplyItems(SupplyItem entity)
		{
			this.SendPropertyChanging();
			entity.VatRate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.ClientType")]
	public partial class ClientType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Type;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public ClientType()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientType_Customer", Storage="_Customers", ThisKey="Id", OtherKey="Type")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.ClientType = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.ClientType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Credit")]
	public partial class Credit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CustomerId;
		
		private System.Nullable<int> _SalesId;
		
		private System.Nullable<decimal> _Value;
		
		private System.Nullable<System.DateTime> _ModifiedOn;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnSalesIdChanging(System.Nullable<int> value);
    partial void OnSalesIdChanged();
    partial void OnValueChanging(System.Nullable<decimal> value);
    partial void OnValueChanged();
    partial void OnModifiedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedOnChanged();
    #endregion
		
		public Credit()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int NOT NULL")]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesId", DbType="Int")]
		public System.Nullable<int> SalesId
		{
			get
			{
				return this._SalesId;
			}
			set
			{
				if ((this._SalesId != value))
				{
					this.OnSalesIdChanging(value);
					this.SendPropertyChanging();
					this._SalesId = value;
					this.SendPropertyChanged("SalesId");
					this.OnSalesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedOn
		{
			get
			{
				return this._ModifiedOn;
			}
			set
			{
				if ((this._ModifiedOn != value))
				{
					this.OnModifiedOnChanging(value);
					this.SendPropertyChanging();
					this._ModifiedOn = value;
					this.SendPropertyChanged("ModifiedOn");
					this.OnModifiedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Credit", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Credits.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Credits.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Emp_Dept> _Emp_Depts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Department()
		{
			this._Emp_Depts = new EntitySet<Emp_Dept>(new Action<Emp_Dept>(this.attach_Emp_Depts), new Action<Emp_Dept>(this.detach_Emp_Depts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Emp_Dept", Storage="_Emp_Depts", ThisKey="Id", OtherKey="DepartmentId")]
		public EntitySet<Emp_Dept> Emp_Depts
		{
			get
			{
				return this._Emp_Depts;
			}
			set
			{
				this._Emp_Depts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Emp_Depts(Emp_Dept entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Emp_Depts(Emp_Dept entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Emp_Dept")]
	public partial class Emp_Dept : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EmployeeId;
		
		private int _DepartmentId;
		
		private System.Nullable<int> _DepDefault;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmployeeIdChanging(int value);
    partial void OnEmployeeIdChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnDepDefaultChanging(System.Nullable<int> value);
    partial void OnDepDefaultChanged();
    #endregion
		
		public Emp_Dept()
		{
			this._Department = default(EntityRef<Department>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int NOT NULL")]
		public int EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL")]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepDefault", DbType="Int")]
		public System.Nullable<int> DepDefault
		{
			get
			{
				return this._DepDefault;
			}
			set
			{
				if ((this._DepDefault != value))
				{
					this.OnDepDefaultChanging(value);
					this.SendPropertyChanging();
					this._DepDefault = value;
					this.SendPropertyChanged("DepDefault");
					this.OnDepDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Emp_Dept", Storage="_Department", ThisKey="DepartmentId", OtherKey="Id", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Emp_Depts.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Emp_Depts.Add(this);
						this._DepartmentId = value.Id;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Emp_Dept", Storage="_Employee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Emp_Depts.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Emp_Depts.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _PersonId;
		
		private System.Nullable<System.DateTime> _DateIn;
		
		private System.Nullable<System.DateTime> _DateOut;
		
		private EntitySet<Emp_Dept> _Emp_Depts;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Order> _Orders1;
		
		private EntitySet<PriceHistory> _PriceHistories;
		
		private EntitySet<Sale> _Sales;
		
		private EntitySet<Security> _Securities;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonIdChanging(System.Nullable<int> value);
    partial void OnPersonIdChanged();
    partial void OnDateInChanging(System.Nullable<System.DateTime> value);
    partial void OnDateInChanged();
    partial void OnDateOutChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOutChanged();
    #endregion
		
		public Employee()
		{
			this._Emp_Depts = new EntitySet<Emp_Dept>(new Action<Emp_Dept>(this.attach_Emp_Depts), new Action<Emp_Dept>(this.detach_Emp_Depts));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Orders1 = new EntitySet<Order>(new Action<Order>(this.attach_Orders1), new Action<Order>(this.detach_Orders1));
			this._PriceHistories = new EntitySet<PriceHistory>(new Action<PriceHistory>(this.attach_PriceHistories), new Action<PriceHistory>(this.detach_PriceHistories));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			this._Securities = new EntitySet<Security>(new Action<Security>(this.attach_Securities), new Action<Security>(this.detach_Securities));
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="Int")]
		public System.Nullable<int> PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateIn", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateIn
		{
			get
			{
				return this._DateIn;
			}
			set
			{
				if ((this._DateIn != value))
				{
					this.OnDateInChanging(value);
					this.SendPropertyChanging();
					this._DateIn = value;
					this.SendPropertyChanged("DateIn");
					this.OnDateInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOut", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOut
		{
			get
			{
				return this._DateOut;
			}
			set
			{
				if ((this._DateOut != value))
				{
					this.OnDateOutChanging(value);
					this.SendPropertyChanging();
					this._DateOut = value;
					this.SendPropertyChanged("DateOut");
					this.OnDateOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Emp_Dept", Storage="_Emp_Depts", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<Emp_Dept> Emp_Depts
		{
			get
			{
				return this._Emp_Depts;
			}
			set
			{
				this._Emp_Depts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Invoice", Storage="_Invoices", ThisKey="Id", OtherKey="EmpDeliveryId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Order", Storage="_Orders", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Order1", Storage="_Orders1", ThisKey="Id", OtherKey="EmpDeliveryId")]
		public EntitySet<Order> Orders1
		{
			get
			{
				return this._Orders1;
			}
			set
			{
				this._Orders1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PriceHistory", Storage="_PriceHistories", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<PriceHistory> PriceHistories
		{
			get
			{
				return this._PriceHistories;
			}
			set
			{
				this._PriceHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Sale", Storage="_Sales", ThisKey="Id", OtherKey="SellerId")]
		public EntitySet<Sale> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Security", Storage="_Securities", ThisKey="Id", OtherKey="EmployeeId")]
		public EntitySet<Security> Securities
		{
			get
			{
				return this._Securities;
			}
			set
			{
				this._Securities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Employee", Storage="_Person", ThisKey="PersonId", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._PersonId = value.Id;
					}
					else
					{
						this._PersonId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Emp_Depts(Emp_Dept entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Emp_Depts(Emp_Dept entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_PriceHistories(PriceHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_PriceHistories(PriceHistory entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Securities(Security entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Securities(Security entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Invoice")]
	public partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _InvoiceNo;
		
		private System.DateTime _InvoiceDate;
		
		private System.Nullable<System.DateTime> _DeliveryDate;
		
		private System.Nullable<int> _CustomerId;
		
		private string _Description;
		
		private System.Nullable<int> _EmpDeliveryId;
		
		private System.Nullable<int> _Status;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SalesStatus> _SalesStatus;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnInvoiceDateChanging(System.DateTime value);
    partial void OnInvoiceDateChanged();
    partial void OnDeliveryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeliveryDateChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEmpDeliveryIdChanging(System.Nullable<int> value);
    partial void OnEmpDeliveryIdChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public Invoice()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Employee = default(EntityRef<Employee>);
			this._SalesStatus = default(EntityRef<SalesStatus>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNo", DbType="NVarChar(100)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceDate", DbType="DateTime NOT NULL")]
		public System.DateTime InvoiceDate
		{
			get
			{
				return this._InvoiceDate;
			}
			set
			{
				if ((this._InvoiceDate != value))
				{
					this.OnInvoiceDateChanging(value);
					this.SendPropertyChanging();
					this._InvoiceDate = value;
					this.SendPropertyChanged("InvoiceDate");
					this.OnInvoiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this.OnDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._DeliveryDate = value;
					this.SendPropertyChanged("DeliveryDate");
					this.OnDeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpDeliveryId", DbType="Int")]
		public System.Nullable<int> EmpDeliveryId
		{
			get
			{
				return this._EmpDeliveryId;
			}
			set
			{
				if ((this._EmpDeliveryId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpDeliveryIdChanging(value);
					this.SendPropertyChanging();
					this._EmpDeliveryId = value;
					this.SendPropertyChanged("EmpDeliveryId");
					this.OnEmpDeliveryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					if (this._SalesStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Order", Storage="_Orders", ThisKey="Id", OtherKey="InvoiceId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Invoice", Storage="_Employee", ThisKey="EmpDeliveryId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._EmpDeliveryId = value.Id;
					}
					else
					{
						this._EmpDeliveryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesStatus_Invoice", Storage="_SalesStatus", ThisKey="Status", OtherKey="Id", IsForeignKey=true)]
		public SalesStatus SalesStatus
		{
			get
			{
				return this._SalesStatus.Entity;
			}
			set
			{
				SalesStatus previousValue = this._SalesStatus.Entity;
				if (((previousValue != value) 
							|| (this._SalesStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesStatus.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._SalesStatus.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._Status = value.Id;
					}
					else
					{
						this._Status = default(Nullable<int>);
					}
					this.SendPropertyChanged("SalesStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Invoice", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.OrderItems")]
	public partial class OrderItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _OrderId;
		
		private System.Nullable<int> _SalesStatusId;
		
		private int _ProductId;
		
		private System.Nullable<int> _VatId;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private System.Nullable<decimal> _Quantity;
		
		private System.Nullable<int> _SellingUnitId;
		
		private string _Description;
		
		private EntityRef<VatRate> _VatRate;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<SalesStatus> _SalesStatus;
		
		private EntityRef<SellingUnit> _SellingUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnSalesStatusIdChanging(System.Nullable<int> value);
    partial void OnSalesStatusIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnVatIdChanging(System.Nullable<int> value);
    partial void OnVatIdChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    partial void OnQuantityChanging(System.Nullable<decimal> value);
    partial void OnQuantityChanged();
    partial void OnSellingUnitIdChanging(System.Nullable<int> value);
    partial void OnSellingUnitIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public OrderItem()
		{
			this._VatRate = default(EntityRef<VatRate>);
			this._Order = default(EntityRef<Order>);
			this._Product = default(EntityRef<Product>);
			this._SalesStatus = default(EntityRef<SalesStatus>);
			this._SellingUnit = default(EntityRef<SellingUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL")]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesStatusId", DbType="Int")]
		public System.Nullable<int> SalesStatusId
		{
			get
			{
				return this._SalesStatusId;
			}
			set
			{
				if ((this._SalesStatusId != value))
				{
					if (this._SalesStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalesStatusIdChanging(value);
					this.SendPropertyChanging();
					this._SalesStatusId = value;
					this.SendPropertyChanged("SalesStatusId");
					this.OnSalesStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatId", DbType="Int")]
		public System.Nullable<int> VatId
		{
			get
			{
				return this._VatId;
			}
			set
			{
				if ((this._VatId != value))
				{
					if (this._VatRate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVatIdChanging(value);
					this.SendPropertyChanging();
					this._VatId = value;
					this.SendPropertyChanged("VatId");
					this.OnVatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(10,1)")]
		public System.Nullable<decimal> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingUnitId", DbType="Int")]
		public System.Nullable<int> SellingUnitId
		{
			get
			{
				return this._SellingUnitId;
			}
			set
			{
				if ((this._SellingUnitId != value))
				{
					if (this._SellingUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellingUnitIdChanging(value);
					this.SendPropertyChanging();
					this._SellingUnitId = value;
					this.SendPropertyChanged("SellingUnitId");
					this.OnSellingUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VatRate_OrderItem", Storage="_VatRate", ThisKey="VatId", OtherKey="Id", IsForeignKey=true)]
		public VatRate VatRate
		{
			get
			{
				return this._VatRate.Entity;
			}
			set
			{
				VatRate previousValue = this._VatRate.Entity;
				if (((previousValue != value) 
							|| (this._VatRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VatRate.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._VatRate.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._VatId = value.Id;
					}
					else
					{
						this._VatId = default(Nullable<int>);
					}
					this.SendPropertyChanged("VatRate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderItem", Storage="_Order", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderItem", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesStatus_OrderItem", Storage="_SalesStatus", ThisKey="SalesStatusId", OtherKey="Id", IsForeignKey=true)]
		public SalesStatus SalesStatus
		{
			get
			{
				return this._SalesStatus.Entity;
			}
			set
			{
				SalesStatus previousValue = this._SalesStatus.Entity;
				if (((previousValue != value) 
							|| (this._SalesStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesStatus.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._SalesStatus.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._SalesStatusId = value.Id;
					}
					else
					{
						this._SalesStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SalesStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellingUnit_OrderItem", Storage="_SellingUnit", ThisKey="SellingUnitId", OtherKey="Id", IsForeignKey=true)]
		public SellingUnit SellingUnit
		{
			get
			{
				return this._SellingUnit.Entity;
			}
			set
			{
				SellingUnit previousValue = this._SellingUnit.Entity;
				if (((previousValue != value) 
							|| (this._SellingUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SellingUnit.Entity = null;
						previousValue.OrderItems.Remove(this);
					}
					this._SellingUnit.Entity = value;
					if ((value != null))
					{
						value.OrderItems.Add(this);
						this._SellingUnitId = value.Id;
					}
					else
					{
						this._SellingUnitId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SellingUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _OrderDate;
		
		private int _CustomerId;
		
		private System.Nullable<int> _EmployeeId;
		
		private System.Nullable<System.DateTime> _RequiredDate;
		
		private System.Nullable<System.DateTime> _ShippedDate;
		
		private System.Nullable<int> _InvoiceId;
		
		private System.Nullable<int> _EmpDeliveryId;
		
		private System.Nullable<int> _PayStatusId;
		
		private System.Nullable<int> _PayTypeId;
		
		private string _Description;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<Invoice> _Invoice;
		
		private EntityRef<PayStatus> _PayStatus;
		
		private EntityRef<PayType> _PayType;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnRequiredDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequiredDateChanged();
    partial void OnShippedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnShippedDateChanged();
    partial void OnInvoiceIdChanging(System.Nullable<int> value);
    partial void OnInvoiceIdChanged();
    partial void OnEmpDeliveryIdChanging(System.Nullable<int> value);
    partial void OnEmpDeliveryIdChanged();
    partial void OnPayStatusIdChanging(System.Nullable<int> value);
    partial void OnPayStatusIdChanged();
    partial void OnPayTypeIdChanging(System.Nullable<int> value);
    partial void OnPayTypeIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Order()
		{
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._Invoice = default(EntityRef<Invoice>);
			this._PayStatus = default(EntityRef<PayStatus>);
			this._PayType = default(EntityRef<PayType>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int NOT NULL")]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int")]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RequiredDate
		{
			get
			{
				return this._RequiredDate;
			}
			set
			{
				if ((this._RequiredDate != value))
				{
					this.OnRequiredDateChanging(value);
					this.SendPropertyChanging();
					this._RequiredDate = value;
					this.SendPropertyChanged("RequiredDate");
					this.OnRequiredDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ShippedDate
		{
			get
			{
				return this._ShippedDate;
			}
			set
			{
				if ((this._ShippedDate != value))
				{
					this.OnShippedDateChanging(value);
					this.SendPropertyChanging();
					this._ShippedDate = value;
					this.SendPropertyChanged("ShippedDate");
					this.OnShippedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int")]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpDeliveryId", DbType="Int")]
		public System.Nullable<int> EmpDeliveryId
		{
			get
			{
				return this._EmpDeliveryId;
			}
			set
			{
				if ((this._EmpDeliveryId != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpDeliveryIdChanging(value);
					this.SendPropertyChanging();
					this._EmpDeliveryId = value;
					this.SendPropertyChanged("EmpDeliveryId");
					this.OnEmpDeliveryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayStatusId", DbType="Int")]
		public System.Nullable<int> PayStatusId
		{
			get
			{
				return this._PayStatusId;
			}
			set
			{
				if ((this._PayStatusId != value))
				{
					if (this._PayStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayStatusIdChanging(value);
					this.SendPropertyChanging();
					this._PayStatusId = value;
					this.SendPropertyChanged("PayStatusId");
					this.OnPayStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayTypeId", DbType="Int")]
		public System.Nullable<int> PayTypeId
		{
			get
			{
				return this._PayTypeId;
			}
			set
			{
				if ((this._PayTypeId != value))
				{
					if (this._PayType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PayTypeId = value;
					this.SendPropertyChanged("PayTypeId");
					this.OnPayTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderItem", Storage="_OrderItems", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Order", Storage="_Employee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Order1", Storage="_Employee1", ThisKey="EmpDeliveryId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Orders1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Orders1.Add(this);
						this._EmpDeliveryId = value.Id;
					}
					else
					{
						this._EmpDeliveryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_Order", Storage="_Invoice", ThisKey="InvoiceId", OtherKey="Id", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._InvoiceId = value.Id;
					}
					else
					{
						this._InvoiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayStatus_Order", Storage="_PayStatus", ThisKey="PayStatusId", OtherKey="Id", IsForeignKey=true)]
		public PayStatus PayStatus
		{
			get
			{
				return this._PayStatus.Entity;
			}
			set
			{
				PayStatus previousValue = this._PayStatus.Entity;
				if (((previousValue != value) 
							|| (this._PayStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PayStatus.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._PayStatus.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._PayStatusId = value.Id;
					}
					else
					{
						this._PayStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PayStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayType_Order", Storage="_PayType", ThisKey="PayTypeId", OtherKey="Id", IsForeignKey=true)]
		public PayType PayType
		{
			get
			{
				return this._PayType.Entity;
			}
			set
			{
				PayType previousValue = this._PayType.Entity;
				if (((previousValue != value) 
							|| (this._PayType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PayType.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._PayType.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._PayTypeId = value.Id;
					}
					else
					{
						this._PayTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PayType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.PayStatus")]
	public partial class PayStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Sale> _Sales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PayStatus()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayStatus_Order", Storage="_Orders", ThisKey="Id", OtherKey="PayStatusId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayStatus_Sale", Storage="_Sales", ThisKey="Id", OtherKey="PayStatusId")]
		public EntitySet<Sale> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.PayStatus = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.PayStatus = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.PayStatus = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.PayStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.PayType")]
	public partial class PayType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Sale> _Sales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PayType()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayType_Order", Storage="_Orders", ThisKey="Id", OtherKey="PayTypeId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayType_Sale", Storage="_Sales", ThisKey="Id", OtherKey="PayTypeId")]
		public EntitySet<Sale> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.PayType = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.PayType = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.PayType = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.PayType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.PriceHistory")]
	public partial class PriceHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _OrderId;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<int> _EmployeeId;
		
		private System.Nullable<decimal> _VatRate;
		
		private System.Nullable<int> _ProductId;
		
		private System.Nullable<int> _SellingUnitId;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private System.Nullable<decimal> _Price;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<SellingUnit> _SellingUnit;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrderIdChanging(System.Nullable<int> value);
    partial void OnOrderIdChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnVatRateChanging(System.Nullable<decimal> value);
    partial void OnVatRateChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnSellingUnitIdChanging(System.Nullable<int> value);
    partial void OnSellingUnitIdChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    #endregion
		
		public PriceHistory()
		{
			this._Employee = default(EntityRef<Employee>);
			this._SellingUnit = default(EntityRef<SellingUnit>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
		public System.Nullable<int> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int")]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatRate", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> VatRate
		{
			get
			{
				return this._VatRate;
			}
			set
			{
				if ((this._VatRate != value))
				{
					this.OnVatRateChanging(value);
					this.SendPropertyChanging();
					this._VatRate = value;
					this.SendPropertyChanged("VatRate");
					this.OnVatRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int")]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingUnitId", DbType="Int")]
		public System.Nullable<int> SellingUnitId
		{
			get
			{
				return this._SellingUnitId;
			}
			set
			{
				if ((this._SellingUnitId != value))
				{
					if (this._SellingUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellingUnitIdChanging(value);
					this.SendPropertyChanging();
					this._SellingUnitId = value;
					this.SendPropertyChanged("SellingUnitId");
					this.OnSellingUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", AutoSync=AutoSync.Always, DbType="Decimal(26,8)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PriceHistory", Storage="_Employee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.PriceHistories.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.PriceHistories.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellingUnit_PriceHistory", Storage="_SellingUnit", ThisKey="SellingUnitId", OtherKey="Id", IsForeignKey=true)]
		public SellingUnit SellingUnit
		{
			get
			{
				return this._SellingUnit.Entity;
			}
			set
			{
				SellingUnit previousValue = this._SellingUnit.Entity;
				if (((previousValue != value) 
							|| (this._SellingUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SellingUnit.Entity = null;
						previousValue.PriceHistories.Remove(this);
					}
					this._SellingUnit.Entity = value;
					if ((value != null))
					{
						value.PriceHistories.Add(this);
						this._SellingUnitId = value.Id;
					}
					else
					{
						this._SellingUnitId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SellingUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_PriceHistory", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.PriceHistories.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.PriceHistories.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CategoryId;
		
		private string _Name;
		
		private System.Nullable<int> _SupplierId;
		
		private string _BarCode;
		
		private System.Nullable<int> _VatRateId;
		
		private string _Description;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntitySet<SalesItem> _SalesItems;
		
		private EntitySet<ProductUnit> _ProductUnits;
		
		private EntitySet<SupplyItem> _SupplyItems;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<VatRate> _VatRate;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSupplierIdChanging(System.Nullable<int> value);
    partial void OnSupplierIdChanged();
    partial void OnBarCodeChanging(string value);
    partial void OnBarCodeChanged();
    partial void OnVatRateIdChanging(System.Nullable<int> value);
    partial void OnVatRateIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Product()
		{
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._SalesItems = new EntitySet<SalesItem>(new Action<SalesItem>(this.attach_SalesItems), new Action<SalesItem>(this.detach_SalesItems));
			this._ProductUnits = new EntitySet<ProductUnit>(new Action<ProductUnit>(this.attach_ProductUnits), new Action<ProductUnit>(this.detach_ProductUnits));
			this._SupplyItems = new EntitySet<SupplyItem>(new Action<SupplyItem>(this.attach_SupplyItems), new Action<SupplyItem>(this.detach_SupplyItems));
			this._Category = default(EntityRef<Category>);
			this._VatRate = default(EntityRef<VatRate>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="Int")]
		public System.Nullable<int> SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarCode", DbType="NVarChar(MAX)")]
		public string BarCode
		{
			get
			{
				return this._BarCode;
			}
			set
			{
				if ((this._BarCode != value))
				{
					this.OnBarCodeChanging(value);
					this.SendPropertyChanging();
					this._BarCode = value;
					this.SendPropertyChanged("BarCode");
					this.OnBarCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatRateId", DbType="Int")]
		public System.Nullable<int> VatRateId
		{
			get
			{
				return this._VatRateId;
			}
			set
			{
				if ((this._VatRateId != value))
				{
					if (this._VatRate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVatRateIdChanging(value);
					this.SendPropertyChanging();
					this._VatRateId = value;
					this.SendPropertyChanged("VatRateId");
					this.OnVatRateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderItem", Storage="_OrderItems", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SalesItem", Storage="_SalesItems", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<SalesItem> SalesItems
		{
			get
			{
				return this._SalesItems;
			}
			set
			{
				this._SalesItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductUnit", Storage="_ProductUnits", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<ProductUnit> ProductUnits
		{
			get
			{
				return this._ProductUnits;
			}
			set
			{
				this._ProductUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SupplyItem", Storage="_SupplyItems", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<SupplyItem> SupplyItems
		{
			get
			{
				return this._SupplyItems;
			}
			set
			{
				this._SupplyItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VatRate_Product", Storage="_VatRate", ThisKey="VatRateId", OtherKey="Id", IsForeignKey=true)]
		public VatRate VatRate
		{
			get
			{
				return this._VatRate.Entity;
			}
			set
			{
				VatRate previousValue = this._VatRate.Entity;
				if (((previousValue != value) 
							|| (this._VatRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VatRate.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._VatRate.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._VatRateId = value.Id;
					}
					else
					{
						this._VatRateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("VatRate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Product", Storage="_Supplier", ThisKey="SupplierId", OtherKey="Id", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._SupplierId = value.Id;
					}
					else
					{
						this._SupplierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_SalesItems(SalesItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_SalesItems(SalesItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductUnits(ProductUnit entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductUnits(ProductUnit entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_SupplyItems(SupplyItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_SupplyItems(SupplyItem entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Security> _Securities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._Securities = new EntitySet<Security>(new Action<Security>(this.attach_Securities), new Action<Security>(this.detach_Securities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Security", Storage="_Securities", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<Security> Securities
		{
			get
			{
				return this._Securities;
			}
			set
			{
				this._Securities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Securities(Security entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Securities(Security entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Sales")]
	public partial class Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _SalesDate;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<int> _OrderId;
		
		private System.Nullable<int> _SalesStatusId;
		
		private System.Nullable<int> _SalesTypeId;
		
		private System.Nullable<int> _PayTypeId;
		
		private System.Nullable<int> _PayStatusId;
		
		private System.Nullable<int> _SellerId;
		
		private string _Description;
		
		private bool _Master;
		
		private System.Nullable<System.DateTime> _ExpireDate;
		
		private EntitySet<SalesItem> _SalesItems;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<PayStatus> _PayStatus;
		
		private EntityRef<PayType> _PayType;
		
		private EntityRef<SalesStatus> _SalesStatus;
		
		private EntityRef<SalesType> _SalesType;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSalesDateChanging(System.DateTime value);
    partial void OnSalesDateChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnOrderIdChanging(System.Nullable<int> value);
    partial void OnOrderIdChanged();
    partial void OnSalesStatusIdChanging(System.Nullable<int> value);
    partial void OnSalesStatusIdChanged();
    partial void OnSalesTypeIdChanging(System.Nullable<int> value);
    partial void OnSalesTypeIdChanged();
    partial void OnPayTypeIdChanging(System.Nullable<int> value);
    partial void OnPayTypeIdChanged();
    partial void OnPayStatusIdChanging(System.Nullable<int> value);
    partial void OnPayStatusIdChanged();
    partial void OnSellerIdChanging(System.Nullable<int> value);
    partial void OnSellerIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMasterChanging(bool value);
    partial void OnMasterChanged();
    partial void OnExpireDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpireDateChanged();
    #endregion
		
		public Sale()
		{
			this._SalesItems = new EntitySet<SalesItem>(new Action<SalesItem>(this.attach_SalesItems), new Action<SalesItem>(this.detach_SalesItems));
			this._Employee = default(EntityRef<Employee>);
			this._PayStatus = default(EntityRef<PayStatus>);
			this._PayType = default(EntityRef<PayType>);
			this._SalesStatus = default(EntityRef<SalesStatus>);
			this._SalesType = default(EntityRef<SalesType>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesDate", DbType="DateTime NOT NULL")]
		public System.DateTime SalesDate
		{
			get
			{
				return this._SalesDate;
			}
			set
			{
				if ((this._SalesDate != value))
				{
					this.OnSalesDateChanging(value);
					this.SendPropertyChanging();
					this._SalesDate = value;
					this.SendPropertyChanged("SalesDate");
					this.OnSalesDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
		public System.Nullable<int> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesStatusId", DbType="Int")]
		public System.Nullable<int> SalesStatusId
		{
			get
			{
				return this._SalesStatusId;
			}
			set
			{
				if ((this._SalesStatusId != value))
				{
					if (this._SalesStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalesStatusIdChanging(value);
					this.SendPropertyChanging();
					this._SalesStatusId = value;
					this.SendPropertyChanged("SalesStatusId");
					this.OnSalesStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesTypeId", DbType="Int")]
		public System.Nullable<int> SalesTypeId
		{
			get
			{
				return this._SalesTypeId;
			}
			set
			{
				if ((this._SalesTypeId != value))
				{
					if (this._SalesType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalesTypeIdChanging(value);
					this.SendPropertyChanging();
					this._SalesTypeId = value;
					this.SendPropertyChanged("SalesTypeId");
					this.OnSalesTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayTypeId", DbType="Int")]
		public System.Nullable<int> PayTypeId
		{
			get
			{
				return this._PayTypeId;
			}
			set
			{
				if ((this._PayTypeId != value))
				{
					if (this._PayType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PayTypeId = value;
					this.SendPropertyChanged("PayTypeId");
					this.OnPayTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayStatusId", DbType="Int")]
		public System.Nullable<int> PayStatusId
		{
			get
			{
				return this._PayStatusId;
			}
			set
			{
				if ((this._PayStatusId != value))
				{
					if (this._PayStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayStatusIdChanging(value);
					this.SendPropertyChanging();
					this._PayStatusId = value;
					this.SendPropertyChanged("PayStatusId");
					this.OnPayStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerId", DbType="Int")]
		public System.Nullable<int> SellerId
		{
			get
			{
				return this._SellerId;
			}
			set
			{
				if ((this._SellerId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellerIdChanging(value);
					this.SendPropertyChanging();
					this._SellerId = value;
					this.SendPropertyChanged("SellerId");
					this.OnSellerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Master", DbType="Bit NOT NULL")]
		public bool Master
		{
			get
			{
				return this._Master;
			}
			set
			{
				if ((this._Master != value))
				{
					this.OnMasterChanging(value);
					this.SendPropertyChanging();
					this._Master = value;
					this.SendPropertyChanged("Master");
					this.OnMasterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpireDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpireDate
		{
			get
			{
				return this._ExpireDate;
			}
			set
			{
				if ((this._ExpireDate != value))
				{
					this.OnExpireDateChanging(value);
					this.SendPropertyChanging();
					this._ExpireDate = value;
					this.SendPropertyChanged("ExpireDate");
					this.OnExpireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_SalesItem", Storage="_SalesItems", ThisKey="Id", OtherKey="SalesId")]
		public EntitySet<SalesItem> SalesItems
		{
			get
			{
				return this._SalesItems;
			}
			set
			{
				this._SalesItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Sale", Storage="_Employee", ThisKey="SellerId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._SellerId = value.Id;
					}
					else
					{
						this._SellerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayStatus_Sale", Storage="_PayStatus", ThisKey="PayStatusId", OtherKey="Id", IsForeignKey=true)]
		public PayStatus PayStatus
		{
			get
			{
				return this._PayStatus.Entity;
			}
			set
			{
				PayStatus previousValue = this._PayStatus.Entity;
				if (((previousValue != value) 
							|| (this._PayStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PayStatus.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._PayStatus.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._PayStatusId = value.Id;
					}
					else
					{
						this._PayStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PayStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayType_Sale", Storage="_PayType", ThisKey="PayTypeId", OtherKey="Id", IsForeignKey=true)]
		public PayType PayType
		{
			get
			{
				return this._PayType.Entity;
			}
			set
			{
				PayType previousValue = this._PayType.Entity;
				if (((previousValue != value) 
							|| (this._PayType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PayType.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._PayType.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._PayTypeId = value.Id;
					}
					else
					{
						this._PayTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PayType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesStatus_Sale", Storage="_SalesStatus", ThisKey="SalesStatusId", OtherKey="Id", IsForeignKey=true)]
		public SalesStatus SalesStatus
		{
			get
			{
				return this._SalesStatus.Entity;
			}
			set
			{
				SalesStatus previousValue = this._SalesStatus.Entity;
				if (((previousValue != value) 
							|| (this._SalesStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesStatus.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._SalesStatus.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._SalesStatusId = value.Id;
					}
					else
					{
						this._SalesStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SalesStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesType_Sale", Storage="_SalesType", ThisKey="SalesTypeId", OtherKey="Id", IsForeignKey=true)]
		public SalesType SalesType
		{
			get
			{
				return this._SalesType.Entity;
			}
			set
			{
				SalesType previousValue = this._SalesType.Entity;
				if (((previousValue != value) 
							|| (this._SalesType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesType.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._SalesType.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._SalesTypeId = value.Id;
					}
					else
					{
						this._SalesTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SalesType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Sales.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Sales.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SalesItems(SalesItem entity)
		{
			this.SendPropertyChanging();
			entity.Sale = this;
		}
		
		private void detach_SalesItems(SalesItem entity)
		{
			this.SendPropertyChanging();
			entity.Sale = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.SalesItems")]
	public partial class SalesItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _SalesId;
		
		private System.Nullable<int> _ProductId;
		
		private System.Nullable<int> _VatId;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private System.Nullable<decimal> _Quantity;
		
		private System.Nullable<int> _SellingUnitId;
		
		private string _Description;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Sale> _Sale;
		
		private EntityRef<VatRate> _VatRate;
		
		private EntityRef<SellingUnit> _SellingUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSalesIdChanging(System.Nullable<int> value);
    partial void OnSalesIdChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnVatIdChanging(System.Nullable<int> value);
    partial void OnVatIdChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    partial void OnQuantityChanging(System.Nullable<decimal> value);
    partial void OnQuantityChanged();
    partial void OnSellingUnitIdChanging(System.Nullable<int> value);
    partial void OnSellingUnitIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SalesItem()
		{
			this._Product = default(EntityRef<Product>);
			this._Sale = default(EntityRef<Sale>);
			this._VatRate = default(EntityRef<VatRate>);
			this._SellingUnit = default(EntityRef<SellingUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesId", DbType="Int")]
		public System.Nullable<int> SalesId
		{
			get
			{
				return this._SalesId;
			}
			set
			{
				if ((this._SalesId != value))
				{
					if (this._Sale.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalesIdChanging(value);
					this.SendPropertyChanging();
					this._SalesId = value;
					this.SendPropertyChanged("SalesId");
					this.OnSalesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int")]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatId", DbType="Int")]
		public System.Nullable<int> VatId
		{
			get
			{
				return this._VatId;
			}
			set
			{
				if ((this._VatId != value))
				{
					if (this._VatRate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVatIdChanging(value);
					this.SendPropertyChanging();
					this._VatId = value;
					this.SendPropertyChanged("VatId");
					this.OnVatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingUnitId", DbType="Int")]
		public System.Nullable<int> SellingUnitId
		{
			get
			{
				return this._SellingUnitId;
			}
			set
			{
				if ((this._SellingUnitId != value))
				{
					if (this._SellingUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellingUnitIdChanging(value);
					this.SendPropertyChanging();
					this._SellingUnitId = value;
					this.SendPropertyChanged("SellingUnitId");
					this.OnSellingUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SalesItem", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.SalesItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.SalesItems.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sale_SalesItem", Storage="_Sale", ThisKey="SalesId", OtherKey="Id", IsForeignKey=true)]
		public Sale Sale
		{
			get
			{
				return this._Sale.Entity;
			}
			set
			{
				Sale previousValue = this._Sale.Entity;
				if (((previousValue != value) 
							|| (this._Sale.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sale.Entity = null;
						previousValue.SalesItems.Remove(this);
					}
					this._Sale.Entity = value;
					if ((value != null))
					{
						value.SalesItems.Add(this);
						this._SalesId = value.Id;
					}
					else
					{
						this._SalesId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Sale");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VatRate_SalesItem", Storage="_VatRate", ThisKey="VatId", OtherKey="Id", IsForeignKey=true)]
		public VatRate VatRate
		{
			get
			{
				return this._VatRate.Entity;
			}
			set
			{
				VatRate previousValue = this._VatRate.Entity;
				if (((previousValue != value) 
							|| (this._VatRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VatRate.Entity = null;
						previousValue.SalesItems.Remove(this);
					}
					this._VatRate.Entity = value;
					if ((value != null))
					{
						value.SalesItems.Add(this);
						this._VatId = value.Id;
					}
					else
					{
						this._VatId = default(Nullable<int>);
					}
					this.SendPropertyChanged("VatRate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellingUnit_SalesItem", Storage="_SellingUnit", ThisKey="SellingUnitId", OtherKey="Id", IsForeignKey=true)]
		public SellingUnit SellingUnit
		{
			get
			{
				return this._SellingUnit.Entity;
			}
			set
			{
				SellingUnit previousValue = this._SellingUnit.Entity;
				if (((previousValue != value) 
							|| (this._SellingUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SellingUnit.Entity = null;
						previousValue.SalesItems.Remove(this);
					}
					this._SellingUnit.Entity = value;
					if ((value != null))
					{
						value.SalesItems.Add(this);
						this._SellingUnitId = value.Id;
					}
					else
					{
						this._SellingUnitId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SellingUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.SalesStatus")]
	public partial class SalesStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntitySet<Sale> _Sales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SalesStatus()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesStatus_Invoice", Storage="_Invoices", ThisKey="Id", OtherKey="Status")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesStatus_OrderItem", Storage="_OrderItems", ThisKey="Id", OtherKey="SalesStatusId")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesStatus_Sale", Storage="_Sales", ThisKey="Id", OtherKey="SalesStatusId")]
		public EntitySet<Sale> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.SalesStatus = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.SalesStatus = null;
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.SalesStatus = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.SalesStatus = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.SalesStatus = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.SalesStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.SalesType")]
	public partial class SalesType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Sale> _Sales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SalesType()
		{
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SalesType_Sale", Storage="_Sales", ThisKey="Id", OtherKey="SalesTypeId")]
		public EntitySet<Sale> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.SalesType = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.SalesType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.SellingUnit")]
	public partial class SellingUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Unit;
		
		private EntitySet<OrderItem> _OrderItems;
		
		private EntitySet<PriceHistory> _PriceHistories;
		
		private EntitySet<SalesItem> _SalesItems;
		
		private EntitySet<ProductUnit> _ProductUnits;
		
		private EntitySet<SupplyItem> _SupplyItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    #endregion
		
		public SellingUnit()
		{
			this._OrderItems = new EntitySet<OrderItem>(new Action<OrderItem>(this.attach_OrderItems), new Action<OrderItem>(this.detach_OrderItems));
			this._PriceHistories = new EntitySet<PriceHistory>(new Action<PriceHistory>(this.attach_PriceHistories), new Action<PriceHistory>(this.detach_PriceHistories));
			this._SalesItems = new EntitySet<SalesItem>(new Action<SalesItem>(this.attach_SalesItems), new Action<SalesItem>(this.detach_SalesItems));
			this._ProductUnits = new EntitySet<ProductUnit>(new Action<ProductUnit>(this.attach_ProductUnits), new Action<ProductUnit>(this.detach_ProductUnits));
			this._SupplyItems = new EntitySet<SupplyItem>(new Action<SupplyItem>(this.attach_SupplyItems), new Action<SupplyItem>(this.detach_SupplyItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellingUnit_OrderItem", Storage="_OrderItems", ThisKey="Id", OtherKey="SellingUnitId")]
		public EntitySet<OrderItem> OrderItems
		{
			get
			{
				return this._OrderItems;
			}
			set
			{
				this._OrderItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellingUnit_PriceHistory", Storage="_PriceHistories", ThisKey="Id", OtherKey="SellingUnitId")]
		public EntitySet<PriceHistory> PriceHistories
		{
			get
			{
				return this._PriceHistories;
			}
			set
			{
				this._PriceHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellingUnit_SalesItem", Storage="_SalesItems", ThisKey="Id", OtherKey="SellingUnitId")]
		public EntitySet<SalesItem> SalesItems
		{
			get
			{
				return this._SalesItems;
			}
			set
			{
				this._SalesItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellingUnit_ProductUnit", Storage="_ProductUnits", ThisKey="Id", OtherKey="SellingUnitId")]
		public EntitySet<ProductUnit> ProductUnits
		{
			get
			{
				return this._ProductUnits;
			}
			set
			{
				this._ProductUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellingUnit_SupplyItem", Storage="_SupplyItems", ThisKey="Id", OtherKey="SellingUnitId")]
		public EntitySet<SupplyItem> SupplyItems
		{
			get
			{
				return this._SupplyItems;
			}
			set
			{
				this._SupplyItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.SellingUnit = this;
		}
		
		private void detach_OrderItems(OrderItem entity)
		{
			this.SendPropertyChanging();
			entity.SellingUnit = null;
		}
		
		private void attach_PriceHistories(PriceHistory entity)
		{
			this.SendPropertyChanging();
			entity.SellingUnit = this;
		}
		
		private void detach_PriceHistories(PriceHistory entity)
		{
			this.SendPropertyChanging();
			entity.SellingUnit = null;
		}
		
		private void attach_SalesItems(SalesItem entity)
		{
			this.SendPropertyChanging();
			entity.SellingUnit = this;
		}
		
		private void detach_SalesItems(SalesItem entity)
		{
			this.SendPropertyChanging();
			entity.SellingUnit = null;
		}
		
		private void attach_ProductUnits(ProductUnit entity)
		{
			this.SendPropertyChanging();
			entity.SellingUnit = this;
		}
		
		private void detach_ProductUnits(ProductUnit entity)
		{
			this.SendPropertyChanging();
			entity.SellingUnit = null;
		}
		
		private void attach_SupplyItems(SupplyItem entity)
		{
			this.SendPropertyChanging();
			entity.SellingUnit = this;
		}
		
		private void detach_SupplyItems(SupplyItem entity)
		{
			this.SendPropertyChanging();
			entity.SellingUnit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _BillingAddress;
		
		private System.Nullable<int> _Contact;
		
		private EntitySet<Product> _Products;
		
		private EntitySet<Supply> _Supplies;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBillingAddressChanging(string value);
    partial void OnBillingAddressChanged();
    partial void OnContactChanging(System.Nullable<int> value);
    partial void OnContactChanged();
    #endregion
		
		public Supplier()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._Supplies = new EntitySet<Supply>(new Action<Supply>(this.attach_Supplies), new Action<Supply>(this.detach_Supplies));
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingAddress", DbType="NVarChar(100)")]
		public string BillingAddress
		{
			get
			{
				return this._BillingAddress;
			}
			set
			{
				if ((this._BillingAddress != value))
				{
					this.OnBillingAddressChanging(value);
					this.SendPropertyChanging();
					this._BillingAddress = value;
					this.SendPropertyChanged("BillingAddress");
					this.OnBillingAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact", DbType="Int")]
		public System.Nullable<int> Contact
		{
			get
			{
				return this._Contact;
			}
			set
			{
				if ((this._Contact != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactChanging(value);
					this.SendPropertyChanging();
					this._Contact = value;
					this.SendPropertyChanged("Contact");
					this.OnContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Product", Storage="_Products", ThisKey="Id", OtherKey="SupplierId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Supply", Storage="_Supplies", ThisKey="Id", OtherKey="SupplierId")]
		public EntitySet<Supply> Supplies
		{
			get
			{
				return this._Supplies;
			}
			set
			{
				this._Supplies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Supplier", Storage="_Person", ThisKey="Contact", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._Contact = value.Id;
					}
					else
					{
						this._Contact = default(Nullable<int>);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_Supplies(Supply entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Supplies(Supply entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.vOrderDetail")]
	public partial class vOrderDetail
	{
		
		private System.Nullable<int> _InvoiceId;
		
		private string _InvoiceNo;
		
		private System.DateTime _OrderDate;
		
		private int _EmpDeliveryId;
		
		private string _DeliveryPerson;
		
		private string _VAT;
		
		private decimal _Rate;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private System.Nullable<decimal> _Quantity;
		
		private string _Unit;
		
		private string _BarCode;
		
		private string _Product;
		
		private string _Description;
		
		private string _Customer;
		
		private string _CompanyName;
		
		private int _CustomerId;
		
		private System.Nullable<System.DateTime> _InvoiceDate;
		
		private System.Nullable<System.DateTime> _DeliveryDate;
		
		public vOrderDetail()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int")]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this._InvoiceId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNo", DbType="NVarChar(20)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this._InvoiceNo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this._OrderDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpDeliveryId", DbType="Int NOT NULL")]
		public int EmpDeliveryId
		{
			get
			{
				return this._EmpDeliveryId;
			}
			set
			{
				if ((this._EmpDeliveryId != value))
				{
					this._EmpDeliveryId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryPerson", DbType="NVarChar(101)")]
		public string DeliveryPerson
		{
			get
			{
				return this._DeliveryPerson;
			}
			set
			{
				if ((this._DeliveryPerson != value))
				{
					this._DeliveryPerson = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VAT", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string VAT
		{
			get
			{
				return this._VAT;
			}
			set
			{
				if ((this._VAT != value))
				{
					this._VAT = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Decimal(10,2) NOT NULL")]
		public decimal Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this._Rate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this._UnitPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(10,1)")]
		public System.Nullable<decimal> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this._Quantity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this._Unit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarCode", DbType="NVarChar(MAX)")]
		public string BarCode
		{
			get
			{
				return this._BarCode;
			}
			set
			{
				if ((this._BarCode != value))
				{
					this._BarCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product", DbType="NVarChar(50)")]
		public string Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				if ((this._Product != value))
				{
					this._Product = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="NVarChar(50)")]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this._Customer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(50)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this._CompanyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int NOT NULL")]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this._CustomerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InvoiceDate
		{
			get
			{
				return this._InvoiceDate;
			}
			set
			{
				if ((this._InvoiceDate != value))
				{
					this._InvoiceDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this._DeliveryDate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.vSales")]
	public partial class vSale
	{
		
		private int _SalesId;
		
		private int _CustomerId;
		
		private string _DeliveryAddress;
		
		private string _BillingAddress;
		
		private string _CustomerLast;
		
		private string _CustomerFirst;
		
		private string _CustomerAddr;
		
		private string _CustomreEmail;
		
		private System.DateTime _SalesDate;
		
		private System.Nullable<int> _SalesStatusId;
		
		private string _SalesStatus;
		
		private System.Nullable<int> _SalesTypeId;
		
		private string _SalesType;
		
		private System.Nullable<int> _VatRateId;
		
		private decimal _VatRate;
		
		private System.Nullable<int> _PayTypeId;
		
		private string _PayType;
		
		private System.Nullable<int> _PayStatusId;
		
		private string _PayStatus;
		
		private System.Nullable<int> _UserId;
		
		private int _EmpId;
		
		private string _EmpLast;
		
		private string _EmpFirst;
		
		private string _EmpAddr;
		
		private string _EmpEmail;
		
		private string _Description;
		
		public vSale()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesId", DbType="Int NOT NULL")]
		public int SalesId
		{
			get
			{
				return this._SalesId;
			}
			set
			{
				if ((this._SalesId != value))
				{
					this._SalesId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int NOT NULL")]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this._CustomerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryAddress", DbType="NVarChar(50)")]
		public string DeliveryAddress
		{
			get
			{
				return this._DeliveryAddress;
			}
			set
			{
				if ((this._DeliveryAddress != value))
				{
					this._DeliveryAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingAddress", DbType="NVarChar(50)")]
		public string BillingAddress
		{
			get
			{
				return this._BillingAddress;
			}
			set
			{
				if ((this._BillingAddress != value))
				{
					this._BillingAddress = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerLast", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerLast
		{
			get
			{
				return this._CustomerLast;
			}
			set
			{
				if ((this._CustomerLast != value))
				{
					this._CustomerLast = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerFirst", DbType="NVarChar(50)")]
		public string CustomerFirst
		{
			get
			{
				return this._CustomerFirst;
			}
			set
			{
				if ((this._CustomerFirst != value))
				{
					this._CustomerFirst = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAddr", DbType="NVarChar(50)")]
		public string CustomerAddr
		{
			get
			{
				return this._CustomerAddr;
			}
			set
			{
				if ((this._CustomerAddr != value))
				{
					this._CustomerAddr = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomreEmail", DbType="NVarChar(50)")]
		public string CustomreEmail
		{
			get
			{
				return this._CustomreEmail;
			}
			set
			{
				if ((this._CustomreEmail != value))
				{
					this._CustomreEmail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesDate", DbType="DateTime NOT NULL")]
		public System.DateTime SalesDate
		{
			get
			{
				return this._SalesDate;
			}
			set
			{
				if ((this._SalesDate != value))
				{
					this._SalesDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesStatusId", DbType="Int")]
		public System.Nullable<int> SalesStatusId
		{
			get
			{
				return this._SalesStatusId;
			}
			set
			{
				if ((this._SalesStatusId != value))
				{
					this._SalesStatusId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SalesStatus
		{
			get
			{
				return this._SalesStatus;
			}
			set
			{
				if ((this._SalesStatus != value))
				{
					this._SalesStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesTypeId", DbType="Int")]
		public System.Nullable<int> SalesTypeId
		{
			get
			{
				return this._SalesTypeId;
			}
			set
			{
				if ((this._SalesTypeId != value))
				{
					this._SalesTypeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesType", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string SalesType
		{
			get
			{
				return this._SalesType;
			}
			set
			{
				if ((this._SalesType != value))
				{
					this._SalesType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatRateId", DbType="Int")]
		public System.Nullable<int> VatRateId
		{
			get
			{
				return this._VatRateId;
			}
			set
			{
				if ((this._VatRateId != value))
				{
					this._VatRateId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatRate", DbType="Decimal(10,2) NOT NULL")]
		public decimal VatRate
		{
			get
			{
				return this._VatRate;
			}
			set
			{
				if ((this._VatRate != value))
				{
					this._VatRate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayTypeId", DbType="Int")]
		public System.Nullable<int> PayTypeId
		{
			get
			{
				return this._PayTypeId;
			}
			set
			{
				if ((this._PayTypeId != value))
				{
					this._PayTypeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayType", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string PayType
		{
			get
			{
				return this._PayType;
			}
			set
			{
				if ((this._PayType != value))
				{
					this._PayType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayStatusId", DbType="Int")]
		public System.Nullable<int> PayStatusId
		{
			get
			{
				return this._PayStatusId;
			}
			set
			{
				if ((this._PayStatusId != value))
				{
					this._PayStatusId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayStatus", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string PayStatus
		{
			get
			{
				return this._PayStatus;
			}
			set
			{
				if ((this._PayStatus != value))
				{
					this._PayStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpId", DbType="Int NOT NULL")]
		public int EmpId
		{
			get
			{
				return this._EmpId;
			}
			set
			{
				if ((this._EmpId != value))
				{
					this._EmpId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpLast", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmpLast
		{
			get
			{
				return this._EmpLast;
			}
			set
			{
				if ((this._EmpLast != value))
				{
					this._EmpLast = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpFirst", DbType="NVarChar(50)")]
		public string EmpFirst
		{
			get
			{
				return this._EmpFirst;
			}
			set
			{
				if ((this._EmpFirst != value))
				{
					this._EmpFirst = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpAddr", DbType="NVarChar(50)")]
		public string EmpAddr
		{
			get
			{
				return this._EmpAddr;
			}
			set
			{
				if ((this._EmpAddr != value))
				{
					this._EmpAddr = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpEmail", DbType="NVarChar(50)")]
		public string EmpEmail
		{
			get
			{
				return this._EmpEmail;
			}
			set
			{
				if ((this._EmpEmail != value))
				{
					this._EmpEmail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.vSalesItems")]
	public partial class vSalesItem
	{
		
		private int _Id;
		
		private int _SalesId;
		
		private int _ProductId;
		
		private string _Category;
		
		private string _SubCategory;
		
		private string _BarCode;
		
		private string _Description;
		
		private int _PriceHistoryId;
		
		private System.Nullable<decimal> _Quantity;
		
		private decimal _UnitPrice;
		
		private decimal _VatRate;
		
		private string _Unit;
		
		private System.Nullable<decimal> _ExclVat;
		
		private System.Nullable<decimal> _InclVat;
		
		private string _SalesStatus;
		
		public vSalesItem()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesId", DbType="Int NOT NULL")]
		public int SalesId
		{
			get
			{
				return this._SalesId;
			}
			set
			{
				if ((this._SalesId != value))
				{
					this._SalesId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this._ProductId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(50)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this._Category = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategory", DbType="NVarChar(50)")]
		public string SubCategory
		{
			get
			{
				return this._SubCategory;
			}
			set
			{
				if ((this._SubCategory != value))
				{
					this._SubCategory = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarCode", DbType="NVarChar(MAX)")]
		public string BarCode
		{
			get
			{
				return this._BarCode;
			}
			set
			{
				if ((this._BarCode != value))
				{
					this._BarCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceHistoryId", DbType="Int NOT NULL")]
		public int PriceHistoryId
		{
			get
			{
				return this._PriceHistoryId;
			}
			set
			{
				if ((this._PriceHistoryId != value))
				{
					this._PriceHistoryId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(10,1)")]
		public System.Nullable<decimal> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this._Quantity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(10,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this._UnitPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatRate", DbType="Decimal(10,2) NOT NULL")]
		public decimal VatRate
		{
			get
			{
				return this._VatRate;
			}
			set
			{
				if ((this._VatRate != value))
				{
					this._VatRate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(50)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this._Unit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExclVat", DbType="Decimal(21,3)")]
		public System.Nullable<decimal> ExclVat
		{
			get
			{
				return this._ExclVat;
			}
			set
			{
				if ((this._ExclVat != value))
				{
					this._ExclVat = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InclVat", DbType="Decimal(37,9)")]
		public System.Nullable<decimal> InclVat
		{
			get
			{
				return this._InclVat;
			}
			set
			{
				if ((this._InclVat != value))
				{
					this._InclVat = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SalesStatus
		{
			get
			{
				return this._SalesStatus;
			}
			set
			{
				if ((this._SalesStatus != value))
				{
					this._SalesStatus = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.vSalesMaster")]
	public partial class vSalesMaster
	{
		
		private int _Id;
		
		private System.DateTime _SalesDate;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<int> _OrderId;
		
		private System.Nullable<int> _SalesStatusId;
		
		private System.Nullable<int> _SalesTypeId;
		
		private System.Nullable<int> _PayTypeId;
		
		private System.Nullable<int> _PayStatusId;
		
		private System.Nullable<int> _SellerId;
		
		private string _Description;
		
		private bool _Master;
		
		private System.Nullable<System.DateTime> _ExpireDate;
		
		public vSalesMaster()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesDate", DbType="DateTime NOT NULL")]
		public System.DateTime SalesDate
		{
			get
			{
				return this._SalesDate;
			}
			set
			{
				if ((this._SalesDate != value))
				{
					this._SalesDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int")]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this._CustomerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int")]
		public System.Nullable<int> OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this._OrderId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesStatusId", DbType="Int")]
		public System.Nullable<int> SalesStatusId
		{
			get
			{
				return this._SalesStatusId;
			}
			set
			{
				if ((this._SalesStatusId != value))
				{
					this._SalesStatusId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesTypeId", DbType="Int")]
		public System.Nullable<int> SalesTypeId
		{
			get
			{
				return this._SalesTypeId;
			}
			set
			{
				if ((this._SalesTypeId != value))
				{
					this._SalesTypeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayTypeId", DbType="Int")]
		public System.Nullable<int> PayTypeId
		{
			get
			{
				return this._PayTypeId;
			}
			set
			{
				if ((this._PayTypeId != value))
				{
					this._PayTypeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayStatusId", DbType="Int")]
		public System.Nullable<int> PayStatusId
		{
			get
			{
				return this._PayStatusId;
			}
			set
			{
				if ((this._PayStatusId != value))
				{
					this._PayStatusId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerId", DbType="Int")]
		public System.Nullable<int> SellerId
		{
			get
			{
				return this._SellerId;
			}
			set
			{
				if ((this._SellerId != value))
				{
					this._SellerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Master", DbType="Bit NOT NULL")]
		public bool Master
		{
			get
			{
				return this._Master;
			}
			set
			{
				if ((this._Master != value))
				{
					this._Master = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpireDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpireDate
		{
			get
			{
				return this._ExpireDate;
			}
			set
			{
				if ((this._ExpireDate != value))
				{
					this._ExpireDate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Phone1;
		
		private string _Phone2;
		
		private string _Email1;
		
		private string _Email2;
		
		private System.Nullable<int> _Gender;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Supplier> _Suppliers;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnPhone1Changing(string value);
    partial void OnPhone1Changed();
    partial void OnPhone2Changing(string value);
    partial void OnPhone2Changed();
    partial void OnEmail1Changing(string value);
    partial void OnEmail1Changed();
    partial void OnEmail2Changing(string value);
    partial void OnEmail2Changed();
    partial void OnGenderChanging(System.Nullable<int> value);
    partial void OnGenderChanged();
    #endregion
		
		public Person()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="DateTime")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="NVarChar(100)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="NVarChar(100)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone1", DbType="NVarChar(100)")]
		public string Phone1
		{
			get
			{
				return this._Phone1;
			}
			set
			{
				if ((this._Phone1 != value))
				{
					this.OnPhone1Changing(value);
					this.SendPropertyChanging();
					this._Phone1 = value;
					this.SendPropertyChanged("Phone1");
					this.OnPhone1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone2", DbType="NVarChar(100)")]
		public string Phone2
		{
			get
			{
				return this._Phone2;
			}
			set
			{
				if ((this._Phone2 != value))
				{
					this.OnPhone2Changing(value);
					this.SendPropertyChanging();
					this._Phone2 = value;
					this.SendPropertyChanged("Phone2");
					this.OnPhone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email1", DbType="NVarChar(100)")]
		public string Email1
		{
			get
			{
				return this._Email1;
			}
			set
			{
				if ((this._Email1 != value))
				{
					this.OnEmail1Changing(value);
					this.SendPropertyChanging();
					this._Email1 = value;
					this.SendPropertyChanged("Email1");
					this.OnEmail1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email2", DbType="NVarChar(100)")]
		public string Email2
		{
			get
			{
				return this._Email2;
			}
			set
			{
				if ((this._Email2 != value))
				{
					this.OnEmail2Changing(value);
					this.SendPropertyChanging();
					this._Email2 = value;
					this.SendPropertyChanged("Email2");
					this.OnEmail2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Int")]
		public System.Nullable<int> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Employee", Storage="_Employees", ThisKey="Id", OtherKey="PersonId")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Supplier", Storage="_Suppliers", ThisKey="Id", OtherKey="Contact")]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Customer", Storage="_Customers", ThisKey="Id", OtherKey="Contact")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.ProductUnit")]
	public partial class ProductUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private int _SellingUnitId;
		
		private int _DisplayIndex;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<SellingUnit> _SellingUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnSellingUnitIdChanging(int value);
    partial void OnSellingUnitIdChanged();
    partial void OnDisplayIndexChanging(int value);
    partial void OnDisplayIndexChanged();
    #endregion
		
		public ProductUnit()
		{
			this._Product = default(EntityRef<Product>);
			this._SellingUnit = default(EntityRef<SellingUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingUnitId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SellingUnitId
		{
			get
			{
				return this._SellingUnitId;
			}
			set
			{
				if ((this._SellingUnitId != value))
				{
					if (this._SellingUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellingUnitIdChanging(value);
					this.SendPropertyChanging();
					this._SellingUnitId = value;
					this.SendPropertyChanged("SellingUnitId");
					this.OnSellingUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayIndex", DbType="Int NOT NULL")]
		public int DisplayIndex
		{
			get
			{
				return this._DisplayIndex;
			}
			set
			{
				if ((this._DisplayIndex != value))
				{
					this.OnDisplayIndexChanging(value);
					this.SendPropertyChanging();
					this._DisplayIndex = value;
					this.SendPropertyChanged("DisplayIndex");
					this.OnDisplayIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductUnit", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductUnits.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductUnits.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellingUnit_ProductUnit", Storage="_SellingUnit", ThisKey="SellingUnitId", OtherKey="Id", IsForeignKey=true)]
		public SellingUnit SellingUnit
		{
			get
			{
				return this._SellingUnit.Entity;
			}
			set
			{
				SellingUnit previousValue = this._SellingUnit.Entity;
				if (((previousValue != value) 
							|| (this._SellingUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SellingUnit.Entity = null;
						previousValue.ProductUnits.Remove(this);
					}
					this._SellingUnit.Entity = value;
					if ((value != null))
					{
						value.ProductUnits.Add(this);
						this._SellingUnitId = value.Id;
					}
					else
					{
						this._SellingUnitId = default(int);
					}
					this.SendPropertyChanged("SellingUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _CompanyName;
		
		private System.Nullable<int> _Contact;
		
		private string _DeliveryAddress;
		
		private string _BillingAddress;
		
		private System.Nullable<int> _Type;
		
		private string _Description;
		
		private EntitySet<Credit> _Credits;
		
		private EntitySet<Invoice> _Invoices;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<PriceHistory> _PriceHistories;
		
		private EntitySet<Sale> _Sales;
		
		private EntityRef<ClientType> _ClientType;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnContactChanging(System.Nullable<int> value);
    partial void OnContactChanged();
    partial void OnDeliveryAddressChanging(string value);
    partial void OnDeliveryAddressChanged();
    partial void OnBillingAddressChanging(string value);
    partial void OnBillingAddressChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Customer()
		{
			this._Credits = new EntitySet<Credit>(new Action<Credit>(this.attach_Credits), new Action<Credit>(this.detach_Credits));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._PriceHistories = new EntitySet<PriceHistory>(new Action<PriceHistory>(this.attach_PriceHistories), new Action<PriceHistory>(this.detach_PriceHistories));
			this._Sales = new EntitySet<Sale>(new Action<Sale>(this.attach_Sales), new Action<Sale>(this.detach_Sales));
			this._ClientType = default(EntityRef<ClientType>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(50)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact", DbType="Int")]
		public System.Nullable<int> Contact
		{
			get
			{
				return this._Contact;
			}
			set
			{
				if ((this._Contact != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactChanging(value);
					this.SendPropertyChanging();
					this._Contact = value;
					this.SendPropertyChanged("Contact");
					this.OnContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryAddress", DbType="NVarChar(MAX)")]
		public string DeliveryAddress
		{
			get
			{
				return this._DeliveryAddress;
			}
			set
			{
				if ((this._DeliveryAddress != value))
				{
					this.OnDeliveryAddressChanging(value);
					this.SendPropertyChanging();
					this._DeliveryAddress = value;
					this.SendPropertyChanged("DeliveryAddress");
					this.OnDeliveryAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingAddress", DbType="NVarChar(MAX)")]
		public string BillingAddress
		{
			get
			{
				return this._BillingAddress;
			}
			set
			{
				if ((this._BillingAddress != value))
				{
					this.OnBillingAddressChanging(value);
					this.SendPropertyChanging();
					this._BillingAddress = value;
					this.SendPropertyChanged("BillingAddress");
					this.OnBillingAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._ClientType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Credit", Storage="_Credits", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<Credit> Credits
		{
			get
			{
				return this._Credits;
			}
			set
			{
				this._Credits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Invoice", Storage="_Invoices", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Orders", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_PriceHistory", Storage="_PriceHistories", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<PriceHistory> PriceHistories
		{
			get
			{
				return this._PriceHistories;
			}
			set
			{
				this._PriceHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Sale", Storage="_Sales", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<Sale> Sales
		{
			get
			{
				return this._Sales;
			}
			set
			{
				this._Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientType_Customer", Storage="_ClientType", ThisKey="Type", OtherKey="Id", IsForeignKey=true)]
		public ClientType ClientType
		{
			get
			{
				return this._ClientType.Entity;
			}
			set
			{
				ClientType previousValue = this._ClientType.Entity;
				if (((previousValue != value) 
							|| (this._ClientType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientType.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._ClientType.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._Type = value.Id;
					}
					else
					{
						this._Type = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClientType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Customer", Storage="_Person", ThisKey="Contact", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._Contact = value.Id;
					}
					else
					{
						this._Contact = default(Nullable<int>);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Credits(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Credits(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_PriceHistories(PriceHistory entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_PriceHistories(PriceHistory entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Sales(Sale entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Screen")]
	public partial class Screen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScreenId;
		
		private System.Nullable<int> _ParentId;
		
		private string _ScreenName;
		
		private string _ScreenPath;
		
		private System.Nullable<bool> _Usable;
		
		private EntitySet<UserScreen> _UserScreens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScreenIdChanging(int value);
    partial void OnScreenIdChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnScreenNameChanging(string value);
    partial void OnScreenNameChanged();
    partial void OnScreenPathChanging(string value);
    partial void OnScreenPathChanged();
    partial void OnUsableChanging(System.Nullable<bool> value);
    partial void OnUsableChanged();
    #endregion
		
		public Screen()
		{
			this._UserScreens = new EntitySet<UserScreen>(new Action<UserScreen>(this.attach_UserScreens), new Action<UserScreen>(this.detach_UserScreens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ScreenId
		{
			get
			{
				return this._ScreenId;
			}
			set
			{
				if ((this._ScreenId != value))
				{
					this.OnScreenIdChanging(value);
					this.SendPropertyChanging();
					this._ScreenId = value;
					this.SendPropertyChanged("ScreenId");
					this.OnScreenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenName", DbType="NVarChar(100)")]
		public string ScreenName
		{
			get
			{
				return this._ScreenName;
			}
			set
			{
				if ((this._ScreenName != value))
				{
					this.OnScreenNameChanging(value);
					this.SendPropertyChanging();
					this._ScreenName = value;
					this.SendPropertyChanged("ScreenName");
					this.OnScreenNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenPath", DbType="NVarChar(MAX)")]
		public string ScreenPath
		{
			get
			{
				return this._ScreenPath;
			}
			set
			{
				if ((this._ScreenPath != value))
				{
					this.OnScreenPathChanging(value);
					this.SendPropertyChanging();
					this._ScreenPath = value;
					this.SendPropertyChanged("ScreenPath");
					this.OnScreenPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Usable", DbType="Bit")]
		public System.Nullable<bool> Usable
		{
			get
			{
				return this._Usable;
			}
			set
			{
				if ((this._Usable != value))
				{
					this.OnUsableChanging(value);
					this.SendPropertyChanging();
					this._Usable = value;
					this.SendPropertyChanged("Usable");
					this.OnUsableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Screen_UserScreen", Storage="_UserScreens", ThisKey="ScreenId", OtherKey="ScreenId")]
		public EntitySet<UserScreen> UserScreens
		{
			get
			{
				return this._UserScreens;
			}
			set
			{
				this._UserScreens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserScreens(UserScreen entity)
		{
			this.SendPropertyChanging();
			entity.Screen = this;
		}
		
		private void detach_UserScreens(UserScreen entity)
		{
			this.SendPropertyChanging();
			entity.Screen = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.UserScreen")]
	public partial class UserScreen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserId;
		
		private System.Nullable<int> _ScreenId;
		
		private System.Nullable<bool> _Default;
		
		private EntityRef<Screen> _Screen;
		
		private EntityRef<Security> _Security;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnScreenIdChanging(System.Nullable<int> value);
    partial void OnScreenIdChanged();
    partial void OnDefaultChanging(System.Nullable<bool> value);
    partial void OnDefaultChanged();
    #endregion
		
		public UserScreen()
		{
			this._Screen = default(EntityRef<Screen>);
			this._Security = default(EntityRef<Security>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Security.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScreenId", DbType="Int")]
		public System.Nullable<int> ScreenId
		{
			get
			{
				return this._ScreenId;
			}
			set
			{
				if ((this._ScreenId != value))
				{
					if (this._Screen.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScreenIdChanging(value);
					this.SendPropertyChanging();
					this._ScreenId = value;
					this.SendPropertyChanged("ScreenId");
					this.OnScreenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Default]", Storage="_Default", DbType="Bit")]
		public System.Nullable<bool> Default
		{
			get
			{
				return this._Default;
			}
			set
			{
				if ((this._Default != value))
				{
					this.OnDefaultChanging(value);
					this.SendPropertyChanging();
					this._Default = value;
					this.SendPropertyChanged("Default");
					this.OnDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Screen_UserScreen", Storage="_Screen", ThisKey="ScreenId", OtherKey="ScreenId", IsForeignKey=true)]
		public Screen Screen
		{
			get
			{
				return this._Screen.Entity;
			}
			set
			{
				Screen previousValue = this._Screen.Entity;
				if (((previousValue != value) 
							|| (this._Screen.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Screen.Entity = null;
						previousValue.UserScreens.Remove(this);
					}
					this._Screen.Entity = value;
					if ((value != null))
					{
						value.UserScreens.Add(this);
						this._ScreenId = value.ScreenId;
					}
					else
					{
						this._ScreenId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Screen");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Security_UserScreen", Storage="_Security", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public Security Security
		{
			get
			{
				return this._Security.Entity;
			}
			set
			{
				Security previousValue = this._Security.Entity;
				if (((previousValue != value) 
							|| (this._Security.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Security.Entity = null;
						previousValue.UserScreens.Remove(this);
					}
					this._Security.Entity = value;
					if ((value != null))
					{
						value.UserScreens.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Security");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Security")]
	public partial class Security : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserName;
		
		private System.Nullable<int> _EmployeeId;
		
		private string _Password;
		
		private int _RoleId;
		
		private System.Data.Linq.Binary _Image;
		
		private System.Nullable<int> _DefaultPage;
		
		private System.Nullable<int> _AccessLevel;
		
		private EntitySet<UserScreen> _UserScreens;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    partial void OnDefaultPageChanging(System.Nullable<int> value);
    partial void OnDefaultPageChanged();
    partial void OnAccessLevelChanging(System.Nullable<int> value);
    partial void OnAccessLevelChanged();
    #endregion
		
		public Security()
		{
			this._UserScreens = new EntitySet<UserScreen>(new Action<UserScreen>(this.attach_UserScreens), new Action<UserScreen>(this.detach_UserScreens));
			this._Employee = default(EntityRef<Employee>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int")]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultPage", DbType="Int")]
		public System.Nullable<int> DefaultPage
		{
			get
			{
				return this._DefaultPage;
			}
			set
			{
				if ((this._DefaultPage != value))
				{
					this.OnDefaultPageChanging(value);
					this.SendPropertyChanging();
					this._DefaultPage = value;
					this.SendPropertyChanged("DefaultPage");
					this.OnDefaultPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int")]
		public System.Nullable<int> AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Security_UserScreen", Storage="_UserScreens", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserScreen> UserScreens
		{
			get
			{
				return this._UserScreens;
			}
			set
			{
				this._UserScreens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Security", Storage="_Employee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Securities.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Securities.Add(this);
						this._EmployeeId = value.Id;
					}
					else
					{
						this._EmployeeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Security", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Securities.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Securities.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserScreens(UserScreen entity)
		{
			this.SendPropertyChanging();
			entity.Security = this;
		}
		
		private void detach_UserScreens(UserScreen entity)
		{
			this.SendPropertyChanging();
			entity.Security = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.Supply")]
	public partial class Supply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _SupplyDate;
		
		private int _SupplierId;
		
		private System.Nullable<int> _EmployeeId;
		
		private System.Nullable<int> _InvoiceId;
		
		private string _Description;
		
		private EntitySet<SupplyItem> _SupplyItems;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSupplyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSupplyDateChanged();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnInvoiceIdChanging(System.Nullable<int> value);
    partial void OnInvoiceIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Supply()
		{
			this._SupplyItems = new EntitySet<SupplyItem>(new Action<SupplyItem>(this.attach_SupplyItems), new Action<SupplyItem>(this.detach_SupplyItems));
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SupplyDate
		{
			get
			{
				return this._SupplyDate;
			}
			set
			{
				if ((this._SupplyDate != value))
				{
					this.OnSupplyDateChanging(value);
					this.SendPropertyChanging();
					this._SupplyDate = value;
					this.SendPropertyChanged("SupplyDate");
					this.OnSupplyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="Int NOT NULL")]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int")]
		public System.Nullable<int> EmployeeId
		{
			get
			{
				return this._EmployeeId;
			}
			set
			{
				if ((this._EmployeeId != value))
				{
					this.OnEmployeeIdChanging(value);
					this.SendPropertyChanging();
					this._EmployeeId = value;
					this.SendPropertyChanged("EmployeeId");
					this.OnEmployeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int")]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supply_SupplyItem", Storage="_SupplyItems", ThisKey="Id", OtherKey="SupplyId")]
		public EntitySet<SupplyItem> SupplyItems
		{
			get
			{
				return this._SupplyItems;
			}
			set
			{
				this._SupplyItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Supply", Storage="_Supplier", ThisKey="SupplierId", OtherKey="Id", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Supplies.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Supplies.Add(this);
						this._SupplierId = value.Id;
					}
					else
					{
						this._SupplierId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SupplyItems(SupplyItem entity)
		{
			this.SendPropertyChanging();
			entity.Supply = this;
		}
		
		private void detach_SupplyItems(SupplyItem entity)
		{
			this.SendPropertyChanging();
			entity.Supply = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.SupplyItems")]
	public partial class SupplyItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SupplyId;
		
		private System.Nullable<int> _SalesStatusId;
		
		private int _ProductId;
		
		private System.Nullable<int> _VatId;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private System.Nullable<decimal> _Quantity;
		
		private System.Nullable<int> _SellingUnitId;
		
		private string _Description;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<SellingUnit> _SellingUnit;
		
		private EntityRef<Supply> _Supply;
		
		private EntityRef<VatRate> _VatRate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSupplyIdChanging(int value);
    partial void OnSupplyIdChanged();
    partial void OnSalesStatusIdChanging(System.Nullable<int> value);
    partial void OnSalesStatusIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnVatIdChanging(System.Nullable<int> value);
    partial void OnVatIdChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    partial void OnQuantityChanging(System.Nullable<decimal> value);
    partial void OnQuantityChanged();
    partial void OnSellingUnitIdChanging(System.Nullable<int> value);
    partial void OnSellingUnitIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SupplyItem()
		{
			this._Product = default(EntityRef<Product>);
			this._SellingUnit = default(EntityRef<SellingUnit>);
			this._Supply = default(EntityRef<Supply>);
			this._VatRate = default(EntityRef<VatRate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplyId", DbType="Int NOT NULL")]
		public int SupplyId
		{
			get
			{
				return this._SupplyId;
			}
			set
			{
				if ((this._SupplyId != value))
				{
					if (this._Supply.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplyIdChanging(value);
					this.SendPropertyChanging();
					this._SupplyId = value;
					this.SendPropertyChanged("SupplyId");
					this.OnSupplyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesStatusId", DbType="Int")]
		public System.Nullable<int> SalesStatusId
		{
			get
			{
				return this._SalesStatusId;
			}
			set
			{
				if ((this._SalesStatusId != value))
				{
					this.OnSalesStatusIdChanging(value);
					this.SendPropertyChanging();
					this._SalesStatusId = value;
					this.SendPropertyChanged("SalesStatusId");
					this.OnSalesStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VatId", DbType="Int")]
		public System.Nullable<int> VatId
		{
			get
			{
				return this._VatId;
			}
			set
			{
				if ((this._VatId != value))
				{
					if (this._VatRate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVatIdChanging(value);
					this.SendPropertyChanging();
					this._VatId = value;
					this.SendPropertyChanged("VatId");
					this.OnVatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellingUnitId", DbType="Int")]
		public System.Nullable<int> SellingUnitId
		{
			get
			{
				return this._SellingUnitId;
			}
			set
			{
				if ((this._SellingUnitId != value))
				{
					if (this._SellingUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellingUnitIdChanging(value);
					this.SendPropertyChanging();
					this._SellingUnitId = value;
					this.SendPropertyChanged("SellingUnitId");
					this.OnSellingUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_SupplyItem", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.SupplyItems.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.SupplyItems.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellingUnit_SupplyItem", Storage="_SellingUnit", ThisKey="SellingUnitId", OtherKey="Id", IsForeignKey=true)]
		public SellingUnit SellingUnit
		{
			get
			{
				return this._SellingUnit.Entity;
			}
			set
			{
				SellingUnit previousValue = this._SellingUnit.Entity;
				if (((previousValue != value) 
							|| (this._SellingUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SellingUnit.Entity = null;
						previousValue.SupplyItems.Remove(this);
					}
					this._SellingUnit.Entity = value;
					if ((value != null))
					{
						value.SupplyItems.Add(this);
						this._SellingUnitId = value.Id;
					}
					else
					{
						this._SellingUnitId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SellingUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supply_SupplyItem", Storage="_Supply", ThisKey="SupplyId", OtherKey="Id", IsForeignKey=true)]
		public Supply Supply
		{
			get
			{
				return this._Supply.Entity;
			}
			set
			{
				Supply previousValue = this._Supply.Entity;
				if (((previousValue != value) 
							|| (this._Supply.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supply.Entity = null;
						previousValue.SupplyItems.Remove(this);
					}
					this._Supply.Entity = value;
					if ((value != null))
					{
						value.SupplyItems.Add(this);
						this._SupplyId = value.Id;
					}
					else
					{
						this._SupplyId = default(int);
					}
					this.SendPropertyChanged("Supply");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VatRate_SupplyItem", Storage="_VatRate", ThisKey="VatId", OtherKey="Id", IsForeignKey=true)]
		public VatRate VatRate
		{
			get
			{
				return this._VatRate.Entity;
			}
			set
			{
				VatRate previousValue = this._VatRate.Entity;
				if (((previousValue != value) 
							|| (this._VatRate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VatRate.Entity = null;
						previousValue.SupplyItems.Remove(this);
					}
					this._VatRate.Entity = value;
					if ((value != null))
					{
						value.SupplyItems.Add(this);
						this._VatId = value.Id;
					}
					else
					{
						this._VatId = default(Nullable<int>);
					}
					this.SendPropertyChanged("VatRate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.CompanyInfo")]
	public partial class CompanyInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CompanyName;
		
		private string _Email;
		
		private string _VATNo;
		
		private string _Phone;
		
		private string _FAX;
		
		private string _Address;
		
		private string _Description;
		
		private string _TermCondition;
		
		private string _Initial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnVATNoChanging(string value);
    partial void OnVATNoChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFAXChanging(string value);
    partial void OnFAXChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTermConditionChanging(string value);
    partial void OnTermConditionChanged();
    partial void OnInitialChanging(string value);
    partial void OnInitialChanged();
    #endregion
		
		public CompanyInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(100)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VATNo", DbType="NVarChar(50)")]
		public string VATNo
		{
			get
			{
				return this._VATNo;
			}
			set
			{
				if ((this._VATNo != value))
				{
					this.OnVATNoChanging(value);
					this.SendPropertyChanging();
					this._VATNo = value;
					this.SendPropertyChanged("VATNo");
					this.OnVATNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FAX", DbType="NVarChar(50)")]
		public string FAX
		{
			get
			{
				return this._FAX;
			}
			set
			{
				if ((this._FAX != value))
				{
					this.OnFAXChanging(value);
					this.SendPropertyChanging();
					this._FAX = value;
					this.SendPropertyChanged("FAX");
					this.OnFAXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermCondition", DbType="NVarChar(MAX)")]
		public string TermCondition
		{
			get
			{
				return this._TermCondition;
			}
			set
			{
				if ((this._TermCondition != value))
				{
					this.OnTermConditionChanging(value);
					this.SendPropertyChanging();
					this._TermCondition = value;
					this.SendPropertyChanged("TermCondition");
					this.OnTermConditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Initial", DbType="NVarChar(10)")]
		public string Initial
		{
			get
			{
				return this._Initial;
			}
			set
			{
				if ((this._Initial != value))
				{
					this.OnInitialChanging(value);
					this.SendPropertyChanging();
					this._Initial = value;
					this.SendPropertyChanged("Initial");
					this.OnInitialChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HS.vEmpDept")]
	public partial class vEmpDept
	{
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Person;
		
		private string _Department;
		
		private System.Nullable<System.DateTime> _DateOut;
		
		public vEmpDept()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Person", DbType="NVarChar(201)")]
		public string Person
		{
			get
			{
				return this._Person;
			}
			set
			{
				if ((this._Person != value))
				{
					this._Person = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(50)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this._Department = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOut", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOut
		{
			get
			{
				return this._DateOut;
			}
			set
			{
				if ((this._DateOut != value))
				{
					this._DateOut = value;
				}
			}
		}
	}
	
	public partial class quotationHistoryResult
	{
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _SalesDate;
		
		private string _Description;
		
		private string _Customer;
		
		private string _SalesPerson;
		
		private System.Nullable<bool> _Master;
		
		private System.Nullable<decimal> _exclVAT;
		
		private System.Nullable<decimal> _inclVAT;
		
		private System.Nullable<decimal> _totalVAT;
		
		public quotationHistoryResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SalesDate
		{
			get
			{
				return this._SalesDate;
			}
			set
			{
				if ((this._SalesDate != value))
				{
					this._SalesDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="NVarChar(50)")]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this._Customer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesPerson", DbType="NVarChar(101)")]
		public string SalesPerson
		{
			get
			{
				return this._SalesPerson;
			}
			set
			{
				if ((this._SalesPerson != value))
				{
					this._SalesPerson = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Master", DbType="Bit")]
		public System.Nullable<bool> Master
		{
			get
			{
				return this._Master;
			}
			set
			{
				if ((this._Master != value))
				{
					this._Master = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exclVAT", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> exclVAT
		{
			get
			{
				return this._exclVAT;
			}
			set
			{
				if ((this._exclVAT != value))
				{
					this._exclVAT = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inclVAT", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> inclVAT
		{
			get
			{
				return this._inclVAT;
			}
			set
			{
				if ((this._inclVAT != value))
				{
					this._inclVAT = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalVAT", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> totalVAT
		{
			get
			{
				return this._totalVAT;
			}
			set
			{
				if ((this._totalVAT != value))
				{
					this._totalVAT = value;
				}
			}
		}
	}
	
	public partial class OpenOrderResult
	{
		
		private int _Id;
		
		private System.Nullable<int> _InvoiceId;
		
		private string _InvoiceNo;
		
		private System.Nullable<System.DateTime> _InvoiceDate;
		
		private System.Nullable<System.DateTime> _DeliveryDate;
		
		private string _Customer;
		
		private System.Nullable<decimal> _Amount;
		
		public OpenOrderResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int")]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this._InvoiceId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNo", DbType="NVarChar(100)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this._InvoiceNo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InvoiceDate
		{
			get
			{
				return this._InvoiceDate;
			}
			set
			{
				if ((this._InvoiceDate != value))
				{
					this._InvoiceDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this._DeliveryDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="NVarChar(100)")]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this._Customer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
	}
	
	public partial class orderHistoryResult
	{
		
		private int _invoiceId;
		
		private string _InvoiceNo;
		
		private System.Nullable<System.DateTime> _InvoiceDate;
		
		private System.Nullable<System.DateTime> _DeliveryDate;
		
		private System.Nullable<int> _DeliveryPersonId;
		
		private System.Nullable<int> _orderId;
		
		private System.Nullable<int> _salesPersonId;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private string _customer;
		
		private string _InvoiceStatus;
		
		private string _InternalComment;
		
		private string _Description;
		
		private System.Nullable<decimal> _exclVAT;
		
		private System.Nullable<decimal> _inclVAT;
		
		private System.Nullable<decimal> _totalVAT;
		
		public orderHistoryResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_invoiceId", DbType="Int NOT NULL")]
		public int invoiceId
		{
			get
			{
				return this._invoiceId;
			}
			set
			{
				if ((this._invoiceId != value))
				{
					this._invoiceId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNo", DbType="VarChar(50)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this._InvoiceNo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InvoiceDate
		{
			get
			{
				return this._InvoiceDate;
			}
			set
			{
				if ((this._InvoiceDate != value))
				{
					this._InvoiceDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this._DeliveryDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryPersonId", DbType="Int")]
		public System.Nullable<int> DeliveryPersonId
		{
			get
			{
				return this._DeliveryPersonId;
			}
			set
			{
				if ((this._DeliveryPersonId != value))
				{
					this._DeliveryPersonId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderId", DbType="Int")]
		public System.Nullable<int> orderId
		{
			get
			{
				return this._orderId;
			}
			set
			{
				if ((this._orderId != value))
				{
					this._orderId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salesPersonId", DbType="Int")]
		public System.Nullable<int> salesPersonId
		{
			get
			{
				return this._salesPersonId;
			}
			set
			{
				if ((this._salesPersonId != value))
				{
					this._salesPersonId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this._OrderDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer", DbType="NVarChar(100)")]
		public string customer
		{
			get
			{
				return this._customer;
			}
			set
			{
				if ((this._customer != value))
				{
					this._customer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceStatus", DbType="NVarChar(50)")]
		public string InvoiceStatus
		{
			get
			{
				return this._InvoiceStatus;
			}
			set
			{
				if ((this._InvoiceStatus != value))
				{
					this._InvoiceStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalComment", DbType="NVarChar(MAX)")]
		public string InternalComment
		{
			get
			{
				return this._InternalComment;
			}
			set
			{
				if ((this._InternalComment != value))
				{
					this._InternalComment = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exclVAT", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> exclVAT
		{
			get
			{
				return this._exclVAT;
			}
			set
			{
				if ((this._exclVAT != value))
				{
					this._exclVAT = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inclVAT", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> inclVAT
		{
			get
			{
				return this._inclVAT;
			}
			set
			{
				if ((this._inclVAT != value))
				{
					this._inclVAT = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalVAT", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> totalVAT
		{
			get
			{
				return this._totalVAT;
			}
			set
			{
				if ((this._totalVAT != value))
				{
					this._totalVAT = value;
				}
			}
		}
	}
	
	public partial class ProductByCustomerResult
	{
		
		private string _Name;
		
		private string _Description;
		
		public ProductByCustomerResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class getUniqInvoiceNoResult
	{
		
		private string _InvoiceNo;
		
		public getUniqInvoiceNoResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceNo", DbType="NVarChar(4000)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this._InvoiceNo = value;
				}
			}
		}
	}
	
	public partial class ProductFilteringResult
	{
		
		private int _productId;
		
		public ProductFilteringResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productId", DbType="Int NOT NULL")]
		public int productId
		{
			get
			{
				return this._productId;
			}
			set
			{
				if ((this._productId != value))
				{
					this._productId = value;
				}
			}
		}
	}
	
	public partial class EmployeeAtWorkResult
	{
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Person;
		
		private string _Department;
		
		public EmployeeAtWorkResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Person", DbType="NVarChar(201)")]
		public string Person
		{
			get
			{
				return this._Person;
			}
			set
			{
				if ((this._Person != value))
				{
					this._Person = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(50)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this._Department = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
